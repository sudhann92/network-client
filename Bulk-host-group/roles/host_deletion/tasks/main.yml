---
# tasks file for host-deletion
- name: Host Controller Deletion
  awx.awx.host:
    name: "{{ __controller_host | mandatory }}"
    inventory: "{{ controller_inventory_name | mandatory }}"
    state: "{{controller_state }}"   
    # new_name: "{{ __controller_host_item.new_name | default(omit, true) }}"
    # description: "{{  controller_inventory_name | default(omit, true) }}"
    # enabled: "{{ __controller_host_item.enabled | default(omit) }}"
    # variables: "{{ __controller_host_item.variables | default(omit, true) | regex_replace('[ ]{2,}', '') }}"
    controller_username: "{{ controller_username | default(omit, true) }}"
    controller_password:  "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:  "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host: "{{ controller_hostname| default(omit, true) }}"
    controller_config_file:  "{{ controller_config_file | default(omit, true) }}"
    validate_certs:  "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ host_value }}"
  loop_control:
    loop_var: __controller_host
  no_log: "{{ controller_configuration_hosts_secure_logging }}"
  async: 1000
  poll: 0
  register: __host_job_async
  changed_when: not __host_job_async.changed
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

- name: "Configure Controller Hosts | Wait for finish the Hosts Deletion"
  ansible.builtin.async_status:
    jid: "{{ __host_job_async_results_item.ansible_job_id }}"
  register: __host_job_async_result
  until: __host_job_async_result.finished
  retries: "{{ controller_configuration_hosts_async_retries }}"
  delay: "{{ controller_configuration_hosts_async_delay }}"
  loop: "{{ __host_job_async.results }}"
  loop_control:
    loop_var: __host_job_async_results_item
  when: __host_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_hosts_secure_logging }}"
  vars:
    ansible_async_dir: '/tmp/.ansible_async'